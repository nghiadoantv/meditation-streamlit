import streamlit as st
import streamlit.components.v1 as components
from gtts import gTTS
import base64
import os


# ==================== C·∫§U H√åNH TRANG ====================
st.set_page_config(
    page_title="Thi·ªÅn H∆°i Th·ªü",
    page_icon="üßò",
    layout="centered",
    initial_sidebar_state="collapsed"
)


# ==================== CSS ====================
st.markdown("""
<style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
</style>
""", unsafe_allow_html=True)


# ==================== SESSION STATE ====================
if 'audio_generated' not in st.session_state:
    st.session_state.audio_generated = False


# ==================== FUNCTIONS ====================
def generate_audio_file(text, filename):
    """T·∫°o file audio t·ª´ text b·∫±ng gTTS"""
    audio_dir = "audio"
    if not os.path.exists(audio_dir):
        os.makedirs(audio_dir)
    
    filepath = os.path.join(audio_dir, filename)
    
    if not os.path.exists(filepath):
        try:
            tts = gTTS(text=text, lang='vi', slow=False)
            tts.save(filepath)
            return True
        except Exception as e:
            st.error(f"L·ªói t·∫°o audio: {e}")
            return False
    return True


def get_audio_base64(file_path):
    """Chuy·ªÉn audio th√†nh base64"""
    try:
        with open(file_path, "rb") as f:
            data = f.read()
            return base64.b64encode(data).decode()
    except:
        return None


def pregenerate_audio_files():
    """T·∫°o s·∫µn t·∫•t c·∫£ file audio c·∫ßn thi·∫øt"""
    audio_texts = {
        "prepare.mp3": "H√£y ng·ªìi tho·∫£i m√°i v√† chu·∫©n b·ªã tinh th·∫ßn",
        "ready.mp3": "Chu·∫©n b·ªã b·∫Øt ƒë·∫ßu",
        "inhale.mp3": "H√≠t v√†o",
        "hold.mp3": "Gi·ªØ h∆°i",
        "exhale.mp3": "Th·ªü ra",
        "complete.mp3": "Ho√†n th√†nh. Ch√∫c m·ª´ng b·∫°n",
        # Countdown numbers - CH·ªà d√πng cho giai ƒëo·∫°n chu·∫©n b·ªã
        "countdown_10.mp3": "10",
        "countdown_9.mp3": "9",
        "countdown_8.mp3": "8",
        "countdown_7.mp3": "7",
        "countdown_6.mp3": "6",
        "countdown_5.mp3": "5",
        "countdown_4.mp3": "4",
        "countdown_3.mp3": "3",
        "countdown_2.mp3": "2",
        "countdown_1.mp3": "1"
    }
    
    with st.spinner("üéµ ƒêang chu·∫©n b·ªã gi·ªçng n√≥i..."):
        for filename, text in audio_texts.items():
            generate_audio_file(text, filename)
    
    st.session_state.audio_generated = True


# ==================== GIAO DI·ªÜN CH√çNH ====================
st.title("üßò Thi·ªÅn H∆°i Th·ªü Cho Ng∆∞·ªùi M·ªõi")
st.markdown("### _H∆∞·ªõng d·∫´n h∆°i th·ªü c√≥ gi·ªçng n√≥i ti·∫øng Vi·ªát_")


# ==================== C√ÄI ƒê·∫∂T ====================
st.markdown("---")
st.subheader("‚öôÔ∏è C√†i ƒê·∫∑t")

col1, col2 = st.columns(2)

with col1:
    prepare_time = st.number_input(
        "‚è±Ô∏è Chu·∫©n b·ªã (gi√¢y)",
        min_value=3,
        max_value=30,
        value=10,
        step=1,
        help="Th·ªùi gian chu·∫©n b·ªã tinh th·∫ßn tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu thi·ªÅn"
    )

with col2:
    infinite_mode = st.checkbox(
        "‚ôæÔ∏è Ch·∫ø ƒë·ªô v√¥ h·∫°n",
        value=False,
        help="Thi·ªÅn kh√¥ng gi·ªõi h·∫°n s·ªë chu k·ª≥ - d·ª´ng khi mu·ªën"
    )

if not infinite_mode:
    total_cycles = st.number_input(
        "üîÑ S·ªë chu k·ª≥",
        min_value=1,
        max_value=999,
        value=10,
        step=1,
        help="S·ªë chu k·ª≥ h√≠t v√†o - gi·ªØ h∆°i - th·ªü ra"
    )
else:
    total_cycles = 0  # 0 = infinite
    st.info("‚ôæÔ∏è Ch·∫ø ƒë·ªô v√¥ h·∫°n: Thi·ªÅn s·∫Ω ti·∫øp t·ª•c cho ƒë·∫øn khi b·∫°n nh·∫•n D·ª´ng")

st.markdown("#### üå¨Ô∏è Th·ªùi gian h∆°i th·ªü")
col3, col4, col5 = st.columns(3)

with col3:
    inhale_time = st.number_input(
        "üå¨Ô∏è H√≠t v√†o (gi√¢y)",
        min_value=2,
        max_value=10,
        value=4,
        step=1
    )

with col4:
    hold_time = st.number_input(
        "‚è∏Ô∏è Gi·ªØ h∆°i (gi√¢y)",
        min_value=0,
        max_value=10,
        value=4,
        step=1,
        help="Th·ªùi gian gi·ªØ h∆°i sau khi h√≠t v√†o (c√≥ th·ªÉ ƒë·ªÉ 0 ƒë·ªÉ b·ªè qua)"
    )

with col5:
    exhale_time = st.number_input(
        "üí® Th·ªü ra (gi√¢y)",
        min_value=2,
        max_value=10,
        value=6,
        step=1
    )

# Hi·ªÉn th·ªã t·ªïng th·ªùi gian 1 chu k·ª≥
cycle_duration = inhale_time + hold_time + exhale_time
st.info(f"‚è±Ô∏è T·ªïng th·ªùi gian 1 chu k·ª≥: **{cycle_duration} gi√¢y** (H√≠t: {inhale_time}s + Gi·ªØ: {hold_time}s + Th·ªü: {exhale_time}s)")


# ==================== T√ôY CH·ªåN GI·ªåNG ƒê·ªåC ====================
st.markdown("---")
st.subheader("üó£Ô∏è T√πy Ch·ªçn Gi·ªçng ƒê·ªçc")

prepare_countdown_voice = st.checkbox(
    "‚è±Ô∏è ƒê·ªçc s·ªë ƒë·∫øm ng∆∞·ª£c chu·∫©n b·ªã",
    value=True,
    help="Gi·ªçng ƒë·ªçc s·∫Ω ƒë·ªçc s·ªë khi ƒë·∫øm ng∆∞·ª£c giai ƒëo·∫°n chu·∫©n b·ªã (10, 9, 8...)"
)

st.info("‚ÑπÔ∏è **Trong l√∫c thi·ªÅn**: Ch·ªâ ƒë·ªçc 'H√≠t v√†o', 'Gi·ªØ h∆°i' v√† 'Th·ªü ra' - KH√îNG ƒë·ªçc s·ªë ƒë·∫øm gi√¢y")


# ==================== √ÇM L∆Ø·ª¢NG ====================
st.markdown("---")
st.subheader("üîä √Çm L∆∞·ª£ng")

col_v1, col_v2 = st.columns(2)

with col_v1:
    voice_volume = st.slider(
        "üó£Ô∏è Gi·ªçng ƒë·ªçc",
        min_value=0,
        max_value=100,
        value=80,
        step=5
    ) / 100

with col_v2:
    music_volume = st.slider(
        "üéµ Nh·∫°c n·ªÅn",
        min_value=0,
        max_value=100,
        value=30,
        step=5
    ) / 100


# ==================== NH·∫†C N·ªÄN ====================
st.markdown("---")

# Check if music file exists and get base64
music_b64 = None
if os.path.exists("meditation_music.mp3"):
    st.success("‚úÖ Nh·∫°c n·ªÅn ƒë√£ s·∫µn s√†ng - s·∫Ω t·ª± ƒë·ªông ph√°t khi b·∫Øt ƒë·∫ßu thi·ªÅn")
    music_b64 = get_audio_base64("meditation_music.mp3")
    if not music_b64:
        st.warning("‚ö†Ô∏è File nh·∫°c qu√° l·ªõn, kh√¥ng th·ªÉ t·ª± ƒë·ªông ph√°t. D√πng audio player th·ªß c√¥ng b√™n d∆∞·ªõi:")
        st.audio("meditation_music.mp3", format="audio/mp3")
else:
    st.warning("‚ö†Ô∏è Ch∆∞a c√≥ file nh·∫°c n·ªÅn. Upload file MP3 b√™n d∆∞·ªõi.")


# ==================== CHU·∫®N B·ªä AUDIO ====================
if not st.session_state.audio_generated:
    if st.button("üéôÔ∏è Chu·∫©n B·ªã Gi·ªçng N√≥i", type="primary", use_container_width=True):
        pregenerate_audio_files()
        st.success("‚úÖ ƒê√£ t·∫°o xong file gi·ªçng n√≥i!")
        st.rerun()
else:
    # Load audio base64
    prepare_b64 = get_audio_base64("audio/prepare.mp3")
    ready_b64 = get_audio_base64("audio/ready.mp3")
    inhale_b64 = get_audio_base64("audio/inhale.mp3")
    hold_b64 = get_audio_base64("audio/hold.mp3")
    exhale_b64 = get_audio_base64("audio/exhale.mp3")
    complete_b64 = get_audio_base64("audio/complete.mp3")
    
    # Load countdown audio
    countdown_audios = {}
    for i in range(1, 11):
        audio_b64 = get_audio_base64(f"audio/countdown_{i}.mp3")
        if audio_b64:
            countdown_audios[i] = audio_b64
    
    # ==================== APP THI·ªÄN (HTML COMPONENT) ====================
    st.markdown("---")
    
    # Convert countdown audios to JavaScript object
    countdown_js = "{\n"
    for num, b64 in countdown_audios.items():
        countdown_js += f'        {num}: "data:audio/mp3;base64,{b64}",\n'
    countdown_js += "    }"
    
    meditation_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body {{
                margin: 0;
                padding: 20px;
                font-family: Arial, sans-serif;
            }}
            
            .big-status {{
                font-size: 48px;
                font-weight: bold;
                text-align: center;
                padding: 40px;
                border-radius: 20px;
                margin: 20px 0;
                animation: pulse 2s ease-in-out infinite;
            }}
            
            .prepare {{
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }}
            
            .inhale {{ 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }}
            
            .hold {{
                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                color: white;
            }}
            
            .exhale {{ 
                background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
                color: white;
            }}
            
            .complete {{
                background: linear-gradient(135deg, #fad961 0%, #f76b1c 100%);
                color: white;
            }}
            
            @keyframes pulse {{
                0%, 100% {{ transform: scale(1); }}
                50% {{ transform: scale(1.05); }}
            }}
            
            .countdown-timer {{
                font-size: 72px;
                font-weight: bold;
                margin-top: 20px;
                animation: countdown-pulse 1s ease-in-out infinite;
            }}
            
            @keyframes countdown-pulse {{
                0%, 100% {{ transform: scale(1); opacity: 1; }}
                50% {{ transform: scale(1.1); opacity: 0.8; }}
            }}
            
            .cycle-info {{
                font-size: 20px;
                font-weight: bold;
                text-align: center;
                padding: 15px;
                background: #f0f2f6;
                border-radius: 10px;
                margin: 10px 0;
            }}
            
            button {{
                width: 48%;
                padding: 15px;
                font-size: 18px;
                font-weight: bold;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                margin: 5px;
            }}
            
            .start-btn {{
                background: #27ae60;
                color: white;
            }}
            
            .stop-btn {{
                background: #e74c3c;
                color: white;
            }}
            
            button:hover {{
                opacity: 0.9;
            }}
            
            button:disabled {{
                opacity: 0.5;
                cursor: not-allowed;
            }}
            
            progress {{
                width: 100%;
                height: 30px;
                border-radius: 10px;
            }}
            
            .infinite-symbol {{
                font-size: 40px;
                animation: rotate 3s linear infinite;
            }}
            
            @keyframes rotate {{
                from {{ transform: rotate(0deg); }}
                to {{ transform: rotate(360deg); }}
            }}
        </style>
    </head>
    <body>
        <div id="status-display"></div>
        <div id="cycle-display"></div>
        <div id="progress-display"></div>
        
        <div style="text-align: center; margin-top: 20px;">
            <button class="start-btn" id="startBtn" onclick="startMeditation()">‚ñ∂Ô∏è B·∫Øt ƒê·∫ßu</button>
            <button class="stop-btn" id="stopBtn" onclick="stopMeditation()">‚èπÔ∏è D·ª´ng</button>
        </div>
        
        <script>
            // Audio files (voice)
            const audios = {{
                prepare: "data:audio/mp3;base64,{prepare_b64}",
                ready: "data:audio/mp3;base64,{ready_b64}",
                inhale: "data:audio/mp3;base64,{inhale_b64}",
                hold: "data:audio/mp3;base64,{hold_b64}",
                exhale: "data:audio/mp3;base64,{exhale_b64}",
                complete: "data:audio/mp3;base64,{complete_b64}"
            }};
            
            // Countdown numbers audio - CH·ªà d√πng cho giai ƒëo·∫°n chu·∫©n b·ªã
            const countdownAudios = {countdown_js};
            
            // Background music
            const bgMusicData = {"'data:audio/mp3;base64," + music_b64 + "'" if music_b64 else "null"};
            let bgMusic = null;
            
            // Settings
            const settings = {{
                prepareTime: {prepare_time},
                inhaleTime: {inhale_time},
                holdTime: {hold_time},
                exhaleTime: {exhale_time},
                totalCycles: {total_cycles},  // 0 = infinite
                voiceVolume: {voice_volume},
                musicVolume: {music_volume},
                prepareCountdownVoice: {"true" if prepare_countdown_voice else "false"}
            }};
            
            const isInfiniteMode = settings.totalCycles === 0;
            
            // State
            let currentCycle = 0;
            let currentPhase = 'idle';
            let countdown = 0;
            let intervalId = null;
            
            // Initialize background music
            if (bgMusicData) {{
                bgMusic = new Audio(bgMusicData);
                bgMusic.loop = true;
                bgMusic.volume = settings.musicVolume;
            }}
            
            // Play audio
            function playAudio(type) {{
                const audio = new Audio(audios[type]);
                audio.volume = settings.voiceVolume;
                audio.play().catch(e => console.log('Audio play prevented:', e));
            }}
            
            // Play countdown number - CH·ªà cho giai ƒëo·∫°n chu·∫©n b·ªã
            function playCountdownNumber(number) {{
                if (countdownAudios[number]) {{
                    const audio = new Audio(countdownAudios[number]);
                    audio.volume = settings.voiceVolume;
                    audio.play().catch(e => console.log('Countdown audio play prevented:', e));
                }}
            }}
            
            // Play background music
            function playBgMusic() {{
                if (bgMusic) {{
                    bgMusic.currentTime = 0;
                    bgMusic.play().catch(e => console.log('BG music play prevented:', e));
                }}
            }}
            
            // Stop background music
            function stopBgMusic() {{
                if (bgMusic) {{
                    bgMusic.pause();
                    bgMusic.currentTime = 0;
                }}
            }}
            
            // Update display
            function updateDisplay(status, cycle, progress) {{
                document.getElementById('status-display').innerHTML = status;
                document.getElementById('cycle-display').innerHTML = cycle || '';
                document.getElementById('progress-display').innerHTML = progress || '';
            }}
            
            // Countdown function - CH·ªà ƒë·ªçc s·ªë trong giai ƒëo·∫°n chu·∫©n b·ªã
            function runCountdown(seconds, callback, enableVoice = false) {{
                countdown = seconds;
                
                if (intervalId) clearInterval(intervalId);
                
                intervalId = setInterval(() => {{
                    if (currentPhase === 'idle') {{
                        clearInterval(intervalId);
                        return;
                    }}
                    
                    countdown--;
                    
                    // CH·ªà ƒë·ªçc s·ªë khi enableVoice = true (giai ƒëo·∫°n chu·∫©n b·ªã)
                    if (enableVoice && countdown >= 1 && countdown <= 10) {{
                        playCountdownNumber(countdown);
                    }}
                    
                    // Update countdown display
                    const statusDiv = document.getElementById('status-display');
                    if (statusDiv) {{
                        const timerSpan = statusDiv.querySelector('.countdown-timer');
                        if (timerSpan) timerSpan.textContent = countdown;
                    }}
                    
                    if (countdown <= 0) {{
                        clearInterval(intervalId);
                        callback();
                    }}
                }}, 1000);
            }}
            
            // Start meditation
            function startMeditation() {{
                console.log('Starting meditation preparation...');
                
                // Disable start button
                document.getElementById('startBtn').disabled = true;
                
                currentPhase = 'prepare';
                currentCycle = 0;
                
                // Show preparation phase
                updateDisplay(
                    '<div class="big-status prepare">Chu·∫©n B·ªã Tinh Th·∫ßn üßò<div class="countdown-timer">' + settings.prepareTime + '</div></div>',
                    '<div class="cycle-info">H√£y ng·ªìi tho·∫£i m√°i v√† th∆∞ gi√£n...</div>',
                    ''
                );
                
                playAudio('prepare');
                
                // Run preparation countdown WITH voice (ƒë·ªçc s·ªë 10, 9, 8...)
                runCountdown(settings.prepareTime, () => {{
                    // Play "ready" sound
                    playAudio('ready');
                    
                    // Show "Chu·∫©n b·ªã b·∫Øt ƒë·∫ßu..." v√† ƒê·ª¢I 2 GI√ÇY
                    updateDisplay(
                        '<div class="big-status prepare">Chu·∫©n B·ªã B·∫Øt ƒê·∫ßu... üåü</div>',
                        '<div class="cycle-info">ƒêang kh·ªüi ƒë·ªông nh·∫°c n·ªÅn...</div>',
                        ''
                    );
                    
                    // Start background music
                    playBgMusic();
                    
                    // ƒê·ª¢I 2 GI√ÇY tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu thi·ªÅn
                    setTimeout(() => {{
                        breathingCycle();
                    }}, 2000);
                }}, settings.prepareCountdownVoice);
            }}
            
            // Breathing cycle - KH√îNG ƒë·ªçc s·ªë, ch·ªâ hi·ªÉn th·ªã v√† ƒë·ªçc "H√≠t v√†o"/"Gi·ªØ h∆°i"/"Th·ªü ra"
            function breathingCycle() {{
                if (currentPhase === 'idle') return;
                
                currentCycle++;
                
                // Check if we should stop (only for non-infinite mode)
                if (!isInfiniteMode && currentCycle > settings.totalCycles) {{
                    completeMeditation();
                    return;
                }}
                
                // Prepare cycle display text
                let cycleText = '';
                if (isInfiniteMode) {{
                    cycleText = '<div class="cycle-info">Chu k·ª≥: ' + currentCycle + ' <span class="infinite-symbol">‚ôæÔ∏è</span></div>';
                }} else {{
                    cycleText = '<div class="cycle-info">Chu k·ª≥: ' + currentCycle + '/' + settings.totalCycles + '</div>';
                }}
                
                // Prepare progress bar
                let progressBar = '';
                if (isInfiniteMode) {{
                    progressBar = '<div style="text-align:center; font-size:40px;">‚ôæÔ∏è</div>';
                }} else {{
                    progressBar = '<progress value="' + currentCycle + '" max="' + settings.totalCycles + '"></progress>';
                }}
                
                // Inhale phase - HI·ªÇN TH·ªä s·ªë gi√¢y nh∆∞ng KH√îNG ƒê·ªåC
                currentPhase = 'inhale';
                
                updateDisplay(
                    '<div class="big-status inhale">H√çT V√ÄO üå¨Ô∏è<div class="countdown-timer">' + settings.inhaleTime + '</div></div>',
                    cycleText,
                    progressBar
                );
                
                // CH·ªà ƒë·ªçc "H√≠t v√†o" - KH√îNG ƒë·ªçc s·ªë
                playAudio('inhale');
                
                // runCountdown v·ªõi enableVoice = FALSE (kh√¥ng ƒë·ªçc s·ªë)
                runCountdown(settings.inhaleTime, () => {{
                    // Hold phase - HI·ªÇN TH·ªä s·ªë gi√¢y nh∆∞ng KH√îNG ƒê·ªåC
                    if (settings.holdTime > 0) {{
                        currentPhase = 'hold';
                        
                        updateDisplay(
                            '<div class="big-status hold">GI·ªÆ H∆†I ‚è∏Ô∏è<div class="countdown-timer">' + settings.holdTime + '</div></div>',
                            cycleText,
                            progressBar
                        );
                        
                        // CH·ªà ƒë·ªçc "Gi·ªØ h∆°i" - KH√îNG ƒë·ªçc s·ªë
                        playAudio('hold');
                        
                        // runCountdown v·ªõi enableVoice = FALSE (kh√¥ng ƒë·ªçc s·ªë)
                        runCountdown(settings.holdTime, () => {{
                            exhalePhase(cycleText, progressBar);
                        }}, false);
                    }} else {{
                        // N·∫øu holdTime = 0, b·ªè qua giai ƒëo·∫°n gi·ªØ h∆°i
                        exhalePhase(cycleText, progressBar);
                    }}
                }}, false);
            }}
            
            // Exhale phase function
            function exhalePhase(cycleText, progressBar) {{
                currentPhase = 'exhale';
                
                updateDisplay(
                    '<div class="big-status exhale">TH·ªû RA üí®<div class="countdown-timer">' + settings.exhaleTime + '</div></div>',
                    cycleText,
                    progressBar
                );
                
                // CH·ªà ƒë·ªçc "Th·ªü ra" - KH√îNG ƒë·ªçc s·ªë
                playAudio('exhale');
                
                // runCountdown v·ªõi enableVoice = FALSE (kh√¥ng ƒë·ªçc s·ªë)
                runCountdown(settings.exhaleTime, () => {{
                    breathingCycle();
                }}, false);
            }}
            
            // Complete meditation
            function completeMeditation() {{
                currentPhase = 'complete';
                
                updateDisplay(
                    '<div class="big-status complete">Ho√†n Th√†nh! üôè</div>',
                    '<div class="cycle-info">B·∫°n ƒë√£ ho√†n th√†nh ' + currentCycle + ' chu k·ª≥ thi·ªÅn</div>',
                    '<progress value="100" max="100"></progress>'
                );
                
                playAudio('complete');
                
                // Fade out background music
                if (bgMusic) {{
                    let fadeOutInterval = setInterval(() => {{
                        if (bgMusic.volume > 0.05) {{
                            bgMusic.volume -= 0.05;
                        }} else {{
                            stopBgMusic();
                            clearInterval(fadeOutInterval);
                        }}
                    }}, 200);
                }}
                
                setTimeout(() => {{
                    currentPhase = 'idle';
                    updateDisplay('', '', '');
                    
                    // Reset music volume and re-enable start button
                    if (bgMusic) {{
                        bgMusic.volume = settings.musicVolume;
                    }}
                    document.getElementById('startBtn').disabled = false;
                }}, 3000);
            }}
            
            // Stop meditation
            function stopMeditation() {{
                if (intervalId) clearInterval(intervalId);
                
                // Stop background music immediately
                stopBgMusic();
                
                const cyclesCompleted = currentCycle;
                
                currentPhase = 'idle';
                currentCycle = 0;
                countdown = 0;
                
                let stopMessage = '‚è∏Ô∏è ƒê√£ d·ª´ng';
                if (cyclesCompleted > 0) {{
                    stopMessage += '<br><small style="font-size:16px;">B·∫°n ƒë√£ ho√†n th√†nh ' + cyclesCompleted + ' chu k·ª≥</small>';
                }}
                
                updateDisplay(
                    '<div style="text-align:center; padding:20px; color:#e74c3c; font-size:24px;">' + stopMessage + '</div>',
                    '',
                    ''
                );
                
                setTimeout(() => {{
                    updateDisplay('', '', '');
                    
                    // Reset music volume and re-enable start button
                    if (bgMusic) {{
                        bgMusic.volume = settings.musicVolume;
                    }}
                    document.getElementById('startBtn').disabled = false;
                }}, 3000);
            }}
        </script>
    </body>
    </html>
    """
    
    # Render HTML component
    components.html(meditation_html, height=600, scrolling=False)


# ==================== UPLOAD NH·∫†C N·ªÄN ====================
st.markdown("---")
with st.expander("üéµ Upload Nh·∫°c N·ªÅn"):
    st.info("üí° Upload file nh·∫°c thi·ªÅn MP3 (khuy·∫øn ngh·ªã < 20 MB ƒë·ªÉ t·ª± ƒë·ªông ph√°t)")
    
    if os.path.exists("meditation_music.mp3"):
        size_mb = os.path.getsize("meditation_music.mp3") / (1024 * 1024)
        if size_mb < 5:
            st.success(f"‚úÖ File hi·ªán t·∫°i: {size_mb:.1f} MB - S·∫Ω t·ª± ƒë·ªông ph√°t khi thi·ªÅn")
        else:
            st.warning(f"‚ö†Ô∏è File hi·ªán t·∫°i: {size_mb:.1f} MB - H∆°i l·ªõn, khuy·∫øn ngh·ªã n√©n xu·ªëng < 5 MB")
    
    uploaded_music = st.file_uploader(
        "Ch·ªçn file MP3",
        type=['mp3'],
        key='music_uploader'
    )
    
    if uploaded_music:
        file_size = uploaded_music.size / (1024 * 1024)
        
        if file_size > 50:
            st.error(f"‚ùå File qu√° l·ªõn ({file_size:.1f} MB). Vui l√≤ng n√©n xu·ªëng < 50 MB")
        else:
            with open("meditation_music.mp3", "wb") as f:
                f.write(uploaded_music.getbuffer())
            st.success(f"‚úÖ ƒê√£ l∆∞u nh·∫°c n·ªÅn ({file_size:.1f} MB)! Refresh trang ƒë·ªÉ √°p d·ª•ng.")


# ==================== H∆Ø·ªöNG D·∫™N N√âN NH·∫†C ====================
with st.expander("üìñ H∆∞·ªõng D·∫´n N√©n File MP3"):
    st.markdown("""
    ### C√°ch n√©n file MP3 xu·ªëng < 5 MB (t·ªëi ∆∞u cho t·ª± ƒë·ªông ph√°t):
    
    **Online Converter (D·ªÖ nh·∫•t):**
    - [FreeConvert Audio Compressor](https://www.freeconvert.com/audio-compressor)
    - Upload file ‚Üí Target: 5 MB ‚Üí Bitrate: 96 kbps ‚Üí Convert
    
    **FFmpeg (N√¢ng cao):**
    ```
    ffmpeg -i input.mp3 -b:a 96k -ac 1 output.mp3
    ```
    
    **Khuy·∫øn ngh·ªã cho nh·∫°c thi·ªÅn:**
    - Bitrate: 96 kbps (ƒë·ªß cho nh·∫°c n·ªÅn)
    - Mono (1 channel)
    - ƒê·ªô d√†i: 10-15 ph√∫t (v·ª´a ƒë·ªß cho 1 session)
    """)


# ==================== K·ª∏ THU·∫¨T TH·ªû PH·ªî BI·∫æN ====================
with st.expander("üßò K·ªπ Thu·∫≠t Th·ªü Ph·ªï Bi·∫øn"):
    st.markdown("""
    ### C√°c t·ª∑ l·ªá h∆°i th·ªü ph·ªï bi·∫øn:
    
    **Box Breathing (4-4-4-4):**
    - H√≠t v√†o: 4 gi√¢y
    - Gi·ªØ h∆°i: 4 gi√¢y
    - Th·ªü ra: 6 gi√¢y
    - Ph√π h·ª£p cho: Gi·∫£m stress, t·∫≠p trung
    
    **Pranayama (4-7-8):**
    - H√≠t v√†o: 4 gi√¢y
    - Gi·ªØ h∆°i: 7 gi√¢y
    - Th·ªü ra: 8 gi√¢y
    - Ph√π h·ª£p cho: Th∆∞ gi√£n s√¢u, ng·ªß ngon
    
    **Wim Hof Basic (deep-0-quick):**
    - H√≠t v√†o: 2 gi√¢y (s√¢u)
    - Gi·ªØ h∆°i: 0 gi√¢y
    - Th·ªü ra: 2 gi√¢y (nhanh)
    - Ph√π h·ª£p cho: NƒÉng l∆∞·ª£ng, mi·ªÖn d·ªãch
    
    **Relaxation (4-0-6):**
    - H√≠t v√†o: 4 gi√¢y
    - Gi·ªØ h∆°i: 0 gi√¢y
    - Th·ªü ra: 6 gi√¢y
    - Ph√π h·ª£p cho: Ng∆∞·ªùi m·ªõi, th∆∞ gi√£n nh·∫π
    """)


# ==================== TH√îNG TIN ====================
st.markdown("---")
st.caption("‚ú® ·ª®ng d·ª•ng Thi·ªÅn H∆°i Th·ªü v5.0 | H√≠t v√†o - Gi·ªØ h∆°i - Th·ªü ra üßò")